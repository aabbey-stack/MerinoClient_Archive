using Photon.Pun;

// ReSharper disable InconsistentNaming

namespace MerinoClient.HarmonyPatches.Exploits;

internal class PhotonNetworkPatches : PatchObject
{
    public PhotonNetworkPatches()
    {
        foreach (var methodInfo in typeof(PhotonNetwork).GetMethods())
            if (methodInfo.Name.StartsWith("Method_Public_Static_Int32_"))
                Patch(typeof(PhotonNetwork).GetMethod(methodInfo.Name),
                    postfix: GetLocalPatch(nameof(GetPingPatch)));

        Patch(typeof(PhotonNetwork).GetMethod(nameof(PhotonNetwork.Method_Public_Static_Void_0)),
            postfix: GetLocalPatch(nameof(Method_Internal_Static_Void_0Patch)));
    }

    private static void Method_Internal_Static_Void_0Patch()
    {
        PhotonNetwork.field_Public_Static_PunLogLevel_0 =
            Config.FullPunLogLogLevel.Value ? PunLogLevel.Full : PunLogLevel.ErrorsOnly;
    }

    // public unsafe static int GetPing()
    private static void GetPingPatch(ref int __result)
    {
        if (!Config.SpoofPing.Value) return;
        __result = Config.PingValue.Value;
    }
}