using VRC.SDKBase;
using VRC.Udon.Wrapper.Modules;

// ReSharper disable InconsistentNaming
// ReSharper disable RedundantAssignment

namespace MerinoClient.HarmonyPatches.Exploits;

internal class VRC_PickupPatch : PatchObject
{
    public VRC_PickupPatch()
    {
        Patch(typeof(VRC_Pickup).GetMethod(nameof(VRC_Pickup.Awake)), postfix: GetLocalPatch(nameof(AwakePatch)));

        Patch(
            typeof(ExternVRCSDK3ComponentsVRCPickup).GetMethod(nameof(ExternVRCSDK3ComponentsVRCPickup
                .__set_DisallowTheft__SystemBoolean)), GetLocalPatch(nameof(ReturnFalse)));

        Patch(
            typeof(ExternVRCSDK3ComponentsVRCPickup).GetMethod(nameof(ExternVRCSDK3ComponentsVRCPickup
                .__set_pickupable__SystemBoolean)), GetLocalPatch(nameof(ReturnFalse)));

        Patch(typeof(VRCPlayerApi).GetMethod(nameof(VRCPlayerApi.EnablePickups)),
            postfix: GetLocalPatch(nameof(EnablePickupsPatch)));
    }

    private static void EnablePickupsPatch(ref bool __0)
    {
        __0 = true;
    }

    private static bool ReturnFalse()
    {
        return false;
    }

    private static void AwakePatch(ref VRC_Pickup __instance)
    {
        __instance.DisallowTheft = false;
        __instance.pickupable = true;
        __instance.allowManipulationWhenEquipped = true;
        __instance.proximity = float.MaxValue;
    }
}